name: New User Signup

on:
  repository_dispatch:
    types: [signup]

jobs:
  encrypt_and_save_user:
    runs-on: ubuntu-latest

    steps:
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Clone storage repo
        env:
          STORAGE_PAT: ${{ secrets.STORAGE_CRUD_FROM_PORTFOLIO }}
        run: |
          git clone https://x-access-token:${STORAGE_PAT}@github.com/me-soumen/storage.git
          cd storage
          mkdir -p database

      - name: Build user JSON and encrypt
        working-directory: ./storage
        env:
          STORAGE_TOKEN: ${{ secrets.STORAGE_CRUD_FROM_PORTFOLIO }}
          USERNAME: ${{ github.event.client_payload.username }}
          EMAIL: ${{ github.event.client_payload.email }}
          NAME: ${{ github.event.client_payload.name }}
          PHONE: ${{ github.event.client_payload.phone }}
          PASSWORD: ${{ github.event.client_payload.password }}
        run: |
          echo "Encrypting password and saving user JSON..."

          node << 'EOF'
          const fs = require('fs');
          const crypto = require('crypto');

          async function encryptTokenNode(tokenBase64, password) {
            return new Promise((resolve, reject) => {
              const salt = crypto.randomBytes(16);
              const iv = crypto.randomBytes(12);

              crypto.pbkdf2(password, salt, 291993, 32, 'sha256', (err, key) => {
                if (err) return reject(err);

                const cipher = crypto.createCipheriv('aes-256-gcm', key, iv);
                let encrypted = cipher.update(tokenBase64, 'utf8');
                encrypted = Buffer.concat([encrypted, cipher.final()]);
                const tag = cipher.getAuthTag();

                const result = Buffer.concat([salt, iv, tag, encrypted]);
                resolve(result.toString('base64'));
              });
            });
          }

          (async () => {
            const token = btoa(process.env.STORAGE_TOKEN);
            const password = process.env.PASSWORD;

            const encryptedPassword = await encryptTokenNode(token, password);

            const userData = {
              username: process.env.USERNAME,
              email: process.env.EMAIL,
              name: process.env.NAME,
              phone: process.env.PHONE,
              password: encryptedPassword,
              portfolio: {}
            };

            const path = `database/${userData.username}.json`;
            fs.mkdirSync("database", { recursive: true });
            fs.writeFileSync(path, JSON.stringify(userData, null, 2));

            console.log(`User JSON saved to ${path}`);
          })();
          EOF

      - name: Commit and push user JSON to storage
        working-directory: ./storage
        run: |
          git config --global user.name "me-soumen"
          git config --global user.email "me.soumen02@gmail.com"
          git add database/${{ github.event.client_payload.username }}.json
          git commit -m "Sign up user ${{ github.event.client_payload.username }}" || echo "Nothing to commit"
          git push
